#include <iostream>
#include <cstdlib>
#include <stack>
#include "stdafx.h"


using namespace std;

struct Position {
    Position() = default;
    Position(unsigned row_arg, unsigned col_arg);
    unsigned row {1}, col {1};
};


void printMaze(char maze[][16]);

void printMaze(char maze[][16]) {
		printf(" ");
	for (int i = 0; i <10; i++)
		for (int j = 0; j < 16; j++) {
			if (j == 15)
				printf("\n");
			printf("%c", maze[i][j]);
		}
	printf("\n");
};

int main()
{
//start is [1][1] , end is [8][13]
	char	maze[10][16] = {
		"OOOOOOOOOOOOOOO",		
		"O O O OOO O  OO",
		"O             O",
		"O O OOOOOOO O O",	
		"O O   O   O   O",	
		"O OOO  OO  OOOO",
		"O    O O      O",
		"OO O O O OOO OO",
		"OO   O   O    O",
		"OOOOOOOOOOOOOOO"	
		
	};


 //prints unsolved maze

	printMaze(maze); 

	stack<int>stackR;
	stack<int>stackC;

	int r = 1;
	int c = 1;

	bool done = false;

	while (!done){

		if (r == 10 - 2 && c == 16 - 2)
			done = true;

//checks east
		if (maze[r][c + 1] == ' ')	
		{
			stackR.push(r);				
			stackC.push(c);
			maze[r][c] = 'x';
			c++;
		}
//checks south
		else if (maze[r + 1][c] == ' ')	
		{
			stackR.push(r);				
			stackC.push(c);
			maze[r][c] = 'x';
			r++;
		}
// checks west
		else if (maze[r][c - 1] == ' ') 
		{
			stackR.push(r);				
			stackC.push(c);
			maze[r][c] = 'x';
			c--;
		}
//checks north
		else if (maze[r - 1][c] == ' ') 
		{
			stackR.push(r);
			stackC.push(c);
			maze[r][c] = 'x';
			r--;
		}
//if stack is not empty, mark current pos. as D and backtrack
		else {
			if (!stackR.empty()) 
			{
				maze[r][c] = 'D';
				
				stackC.pop();
				stackR.pop();
				
				}			
			
			else
			{
				done = true;
//prints maze solution 
				printMaze(maze); 
			}

		}
	}

	double test;
	scanf("%lf", &test);
	return 0;
}
